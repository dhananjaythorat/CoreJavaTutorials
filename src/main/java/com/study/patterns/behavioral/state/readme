Intent : State is a behavioral design pattern that lets an object alter its behavior 
		 when its internal state changes..
			

	The State pattern suggests that you create new classes for all possible states 
	of an object and extract all state-specific behaviors into these classes.

Applicability :
 	1)	Use the State pattern when you have an object that behaves differently depending on its current state, 
 		the number of states is enormous, and the state-specific code changes frequently..
 		
 	2)	Use the pattern when you have a class polluted with massive conditionals that alter how 
 		the class behaves according to the current values of the class’s fields..
 		
 	3)  The State pattern lets you compose hierarchies of state classes and reduce duplication 
 		by extracting common code into abstract base classes.
 		
 	4) Allow an object to alter its behavior when its internal state changes. 
 		The object will appear to change its class.

 	